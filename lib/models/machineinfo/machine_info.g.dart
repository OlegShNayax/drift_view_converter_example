// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'machine_info.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

MachineInfo _$MachineInfoFromJson(Map<String, dynamic> json) => MachineInfo(
      main: json['main'] == null
          ? null
          : Main.fromJson(json['main'] as Map<String, dynamic>),
      details: json['details'] == null
          ? null
          : Details.fromJson(json['details'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$MachineInfoToJson(MachineInfo instance) =>
    <String, dynamic>{
      'main': instance.main?.toJson(),
      'details': instance.details?.toJson(),
    };

Main _$MainFromJson(Map<String, dynamic> json) => Main(
      id: json['id'] as num?,
      typeLutId: json['typeLutId'] as num?,
      dexTypeId: json['dexTypeId'] as num?,
      actorId: json['actorId'] as num?,
      operatorActorId: json['operatorActorId'] as int?,
      modelId: json['modelId'] as num?,
      profileLutId: json['profileLutId'] as num?,
      name: json['name'] as String?,
      number: json['number'] as String?,
      serialNumber: json['serialNumber'] as String?,
      smartStickerId: json['smartStickerId'] as num?,
      monyxMachineId: json['monyxMachineId'] as num?,
      deviceId: json['deviceId'] as num?,
      deviceSerialNumber: json['deviceSerialNumber'] as String?,
      vposId: json['vposId'] as num?,
      vposSerialNumber: json['vposSerialNumber'] as String?,
      groupId: json['groupId'] as num?,
      locationType: json['locationType'] as num?,
      subLocationType: json['subLocationType'] as num?,
      institute: json['institute'] as num?,
      locationId: json['locationId'] as num?,
      customerLocationId: json['customerLocationId'] as num?,
      customerLocation: json['customerLocation'] as String?,
      country: json['country'] as num?,
      region: json['region'] as num?,
      city: json['city'] as num?,
      zipCode: json['zipCode'] as String?,
      geoLongitude: json['geoLongitude'] as num?,
      geoLatitude: json['geoLatitude'] as num?,
      geoAddress: json['geoAddress'] as String?,
      geoCountry: json['geoCountry'] as num?,
      geoState: json['geoState'] as String?,
      geoCity: json['geoCity'] as String?,
      geoZipCode: json['geoZipCode'] as String?,
      statusId: json['statusId'] as num?,
      remarks: json['remarks'] as String?,
      sectorId: json['sectorId'] as num?,
      labels: Main._fromJson(json['labels']),
    )..timeZone = json['timeZone'] as num?;

Map<String, dynamic> _$MainToJson(Main instance) => <String, dynamic>{
      'id': instance.id,
      'typeLutId': instance.typeLutId,
      'dexTypeId': instance.dexTypeId,
      'actorId': instance.actorId,
      'operatorActorId': instance.operatorActorId,
      'modelId': instance.modelId,
      'profileLutId': instance.profileLutId,
      'name': instance.name,
      'number': instance.number,
      'serialNumber': instance.serialNumber,
      'smartStickerId': instance.smartStickerId,
      'monyxMachineId': instance.monyxMachineId,
      'deviceId': instance.deviceId,
      'deviceSerialNumber': instance.deviceSerialNumber,
      'vposId': instance.vposId,
      'vposSerialNumber': instance.vposSerialNumber,
      'groupId': instance.groupId,
      'locationType': instance.locationType,
      'subLocationType': instance.subLocationType,
      'institute': instance.institute,
      'locationId': instance.locationId,
      'customerLocationId': instance.customerLocationId,
      'customerLocation': instance.customerLocation,
      'country': instance.country,
      'region': instance.region,
      'city': instance.city,
      'zipCode': instance.zipCode,
      'timeZone': instance.timeZone,
      'geoLongitude': instance.geoLongitude,
      'geoLatitude': instance.geoLatitude,
      'geoAddress': instance.geoAddress,
      'geoCountry': instance.geoCountry,
      'geoState': instance.geoState,
      'geoCity': instance.geoCity,
      'geoZipCode': instance.geoZipCode,
      'statusId': instance.statusId,
      'remarks': instance.remarks,
      'sectorId': instance.sectorId,
      'labels': instance.labels,
    };

Details _$DetailsFromJson(Map<String, dynamic> json) => Details(
      machinePictures: (json['machinePictures'] as List<dynamic>?)
          ?.map((e) => MachinePictures.fromJson(e as Map<String, dynamic>))
          .toList(),
      customerId: json['customerId'] as num?,
      machineTypeId: json['machineTypeId'] as num?,
      currency: json['currency'] as num?,
      enableAutoVoid: json['enableAutoVoid'] as bool?,
      getNightDexReads: json['getNightDexReads'] as bool?,
      installReport: json['installReport'] as String?,
      isCashEquaVaMinusDa: json['isCashEquaVaMinusDa'] as bool?,
      languageId: json['languageId'] as num?,
      isCheckG85: json['isCheckG85'] as bool?,
      divideBillsDexValueBy: json['divideBillsDexValueBy'] as num?,
      isG85CancelParsing: json['isG85CancelParsing'] as bool?,
      isUseCCprice: json['isUseCCprice'] as bool?,
      salesSourceLutId: json['salesSourceLutId'] as num?,
      alertRulesetId: json['alertRulesetId'] as num?,
      isMachineAlertsOverridePar: json['isMachineAlertsOverridePar'] as bool?,
      machineAlertsOverridenPar: json['machineAlertsOverridenPar'] as num?,
      isMachineAlertsEnabled: json['isMachineAlertsEnabled'] as bool?,
      isMachineProductMember: json['isMachineProductMember'] as bool?,
      isLeadingProductGroupOverridePar:
          json['isLeadingProductGroupOverridePar'] as bool?,
      leadingProductGroupOneOverridePar:
          json['leadingProductGroupOneOverridePar'] as num?,
      leadingProductGroupTwoOverridePar:
          json['leadingProductGroupTwoOverridePar'] as num?,
      multiplyCoinsDexValueBy: json['multiplyCoinsDexValueBy'] as num?,
      multiplyTubesDexValueBy: json['multiplyTubesDexValueBy'] as num?,
      timeZoneOffset: json['timeZoneOffset'] as num?,
      readDexPeriodLutId: json['readDexPeriodLutId'] as num?,
      typeselectionApplyMdb: json['typeselectionApplyMdb'] as bool?,
      typeSelectionId: json['typeSelectionId'] as num?,
      updatedDt: json['updatedDt'] as String?,
      intlDialCode: json['intlDialCode'] as num?,
      logMissingCrc: json['logMissingCrc'] as bool?,
      isExtractLA: json['isExtractLA'] as bool?,
      productMapId: json['productMapId'] as num?,
      isMapModified: json['isMapModified'] as bool?,
      ignoreStatusCash: json['ignoreStatusCash'] as bool?,
      ignoreStatusCashless: json['ignoreStatusCashless'] as bool?,
      ignoreStatusCli: json['ignoreStatusCli'] as bool?,
      ignoreStatusDex: json['ignoreStatusDex'] as bool?,
      ignoreStatusV2v: json['ignoreStatusV2v'] as bool?,
      ignoreStatusVisit: json['ignoreStatusVisit'] as bool?,
      ignoreStatusCashbox: json['ignoreStatusCashbox'] as bool?,
      ignoreStatusRssi: json['ignoreStatusRssi'] as bool?,
      ignoreStatusData: json['ignoreStatusData'] as bool?,
      ignoreStatusFW: json['ignoreStatusFW'] as bool?,
      ignoreCoinTubesSum: json['ignoreCoinTubesSum'] as bool?,
      ignoreCoinTubesCa15Sum: json['ignoreCoinTubesCa15Sum'] as bool?,
      isRemoteVend: json['isRemoteVend'] as bool?,
      longitude: json['longitude'] as num?,
      latitude: json['latitude'] as num?,
      commissionType: json['commissionType'] as num?,
      commissionDefaultValue: json['commissionDefaultValue'] as num?,
      createdBy: json['createdBy'] as num?,
      createdDt: json['createdDt'] as String?,
      updatedBy: json['updatedBy'] as num?,
      tubesSourceLutCode: json['tubesSourceLutCode'] as num?,
      billsSourceLutCode: json['billsSourceLutCode'] as num?,
      useLocationFrom: json['useLocationFrom'] as num?,
      geoLocation: json['geoLocation'] as String?,
      geoAddressStreetNumber: json['geoAddressStreetNumber'] as String?,
      geoZoom: json['geoZoom'] as num?,
      geoSource: json['geoSource'] as String?,
      geoUpdatedDt: json['geoUpdatedDt'] as String?,
      remarksUpdated: json['remarksUpdated'] as String?,
      picklistPriceSourceLutId: json['picklistPriceSourceLutId'] as num?,
      timeZoneKey: json['timeZoneKey'] as num?,
      monyxPictureId: json['monyxPictureId'] as num?,
    );

Map<String, dynamic> _$DetailsToJson(Details instance) => <String, dynamic>{
      'machinePictures':
          instance.machinePictures?.map((e) => e.toJson()).toList(),
      'customerId': instance.customerId,
      'machineTypeId': instance.machineTypeId,
      'currency': instance.currency,
      'enableAutoVoid': instance.enableAutoVoid,
      'getNightDexReads': instance.getNightDexReads,
      'installReport': instance.installReport,
      'isCashEquaVaMinusDa': instance.isCashEquaVaMinusDa,
      'languageId': instance.languageId,
      'isCheckG85': instance.isCheckG85,
      'divideBillsDexValueBy': instance.divideBillsDexValueBy,
      'isG85CancelParsing': instance.isG85CancelParsing,
      'isUseCCprice': instance.isUseCCprice,
      'salesSourceLutId': instance.salesSourceLutId,
      'alertRulesetId': instance.alertRulesetId,
      'isMachineAlertsOverridePar': instance.isMachineAlertsOverridePar,
      'machineAlertsOverridenPar': instance.machineAlertsOverridenPar,
      'isMachineAlertsEnabled': instance.isMachineAlertsEnabled,
      'isMachineProductMember': instance.isMachineProductMember,
      'isLeadingProductGroupOverridePar':
          instance.isLeadingProductGroupOverridePar,
      'leadingProductGroupOneOverridePar':
          instance.leadingProductGroupOneOverridePar,
      'leadingProductGroupTwoOverridePar':
          instance.leadingProductGroupTwoOverridePar,
      'multiplyCoinsDexValueBy': instance.multiplyCoinsDexValueBy,
      'multiplyTubesDexValueBy': instance.multiplyTubesDexValueBy,
      'timeZoneOffset': instance.timeZoneOffset,
      'readDexPeriodLutId': instance.readDexPeriodLutId,
      'typeselectionApplyMdb': instance.typeselectionApplyMdb,
      'typeSelectionId': instance.typeSelectionId,
      'updatedDt': instance.updatedDt,
      'intlDialCode': instance.intlDialCode,
      'logMissingCrc': instance.logMissingCrc,
      'isExtractLA': instance.isExtractLA,
      'productMapId': instance.productMapId,
      'isMapModified': instance.isMapModified,
      'ignoreStatusCash': instance.ignoreStatusCash,
      'ignoreStatusCashless': instance.ignoreStatusCashless,
      'ignoreStatusCli': instance.ignoreStatusCli,
      'ignoreStatusDex': instance.ignoreStatusDex,
      'ignoreStatusV2v': instance.ignoreStatusV2v,
      'ignoreStatusVisit': instance.ignoreStatusVisit,
      'ignoreStatusCashbox': instance.ignoreStatusCashbox,
      'ignoreStatusRssi': instance.ignoreStatusRssi,
      'ignoreStatusData': instance.ignoreStatusData,
      'ignoreStatusFW': instance.ignoreStatusFW,
      'ignoreCoinTubesSum': instance.ignoreCoinTubesSum,
      'ignoreCoinTubesCa15Sum': instance.ignoreCoinTubesCa15Sum,
      'isRemoteVend': instance.isRemoteVend,
      'longitude': instance.longitude,
      'latitude': instance.latitude,
      'commissionType': instance.commissionType,
      'commissionDefaultValue': instance.commissionDefaultValue,
      'createdBy': instance.createdBy,
      'createdDt': instance.createdDt,
      'updatedBy': instance.updatedBy,
      'tubesSourceLutCode': instance.tubesSourceLutCode,
      'billsSourceLutCode': instance.billsSourceLutCode,
      'useLocationFrom': instance.useLocationFrom,
      'geoLocation': instance.geoLocation,
      'geoAddressStreetNumber': instance.geoAddressStreetNumber,
      'geoZoom': instance.geoZoom,
      'geoSource': instance.geoSource,
      'geoUpdatedDt': instance.geoUpdatedDt,
      'remarksUpdated': instance.remarksUpdated,
      'picklistPriceSourceLutId': instance.picklistPriceSourceLutId,
      'timeZoneKey': instance.timeZoneKey,
      'monyxPictureId': instance.monyxPictureId,
    };

MachinePictures _$MachinePicturesFromJson(Map<String, dynamic> json) =>
    MachinePictures(
      pictureId: json['pictureId'] as num?,
      pictureUrl: json['pictureUrl'] as String?,
      createdDt: json['createdDt'] as String?,
      pictureCreatedBy: json['pictureCreatedBy'] as num?,
      statusId: json['statusId'] as num?,
      isMonyx: json['isMonyx'] as bool?,
    );

Map<String, dynamic> _$MachinePicturesToJson(MachinePictures instance) =>
    <String, dynamic>{
      'pictureId': instance.pictureId,
      'pictureUrl': instance.pictureUrl,
      'createdDt': instance.createdDt,
      'pictureCreatedBy': instance.pictureCreatedBy,
      'statusId': instance.statusId,
      'isMonyx': instance.isMonyx,
    };
